pipeline {
    agent any
    environment {
        AZURE_SUBSCRIPTION_ID = ''
        AZURE_CREDENTIALS_ID = ''
        AZURE_TENANT_ID = ''
        AZURE_STORAGE_ACCOUNT = ''
        AZURE_STORAGE_CONTAINER = ''
        AZURE_KEY_VAULT_NAME = ''
        SECRET_NAME = ''
        LOG_ANALYTICS_WORKSPACE_ID = ''
        LOG_ANALYTICS_QUERY = 'AddonAzureBackupJobs | where TimeGenerated >= ago(1d) | where DatasourceType != "Microsoft.Storage/storageAccounts/blobServices" | extend ContainerName = extract(@"[^;]+$", 0, ProtectedContainerUniqueId) | extend ResourceGroupName = extract(@"iaasvmcontainerv2;([^;]+);", 1, ProtectedContainerUniqueId) | extend JobDuration = todatetime("1970-01-01") + JobDurationInSecs * 1s | extend JobDurationFormatted = format_datetime(JobDuration, "HH:mm:ss") | project TimeGenerated, _ResourceId, ContainerName, ResourceGroupName, JobStartDateTime, JobDurationFormatted, JobStatus, JobFailureCode, JobUniqueId | order by TimeGenerated desc'
        EMAIL_RECIPIENT = ''
    }
    stages {
        stage('Checkout') {
            steps {
                git credentialsId: '<functioanl id>', url: '<github repo url>', branch: 'master'
            }
        }

        stage('Fetch Backup Report') {
            steps {
                script{
                // Retrieve the client ID and client secret from Jenkins credentials

                    withCredentials([usernamePassword(credentialsId: "${AZURE_CREDENTIALS_ID}", usernameVariable: 'CLIENT_ID', passwordVariable: 'CLIENT_SECRET')]) {

                // Run the Azure CLI version check and install if not found
                    sh """
                    az --version || curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    """

                // Upgrade Azure CLI version
                   sh """
                   az upgrade --yes && az --version
                   """
                
                // Run log analytics query to generate VM backup jobs report and save the output to CSV file

                    sh """
                    az login --service-principal -u ${CLIENT_ID} -p ${CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
                    az monitor log-analytics query -w ${LOG_ANALYTICS_WORKSPACE_ID} --analytics-query '${LOG_ANALYTICS_QUERY}' --out json > backup_report.json
                    """

                // Convert backup report JSON file to CSV file
                    sh """
                    echo "TimeGenerated,ResourceId,ContainerName,ResourceGroupName,JobStartDateTime,JobDurationFormatted,JobStatus,JobFailureCode,JobUniqueId" > BackupReport_\$(date +'%Y-%m-%d').csv
                    jq -r '.[] | [ .TimeGenerated, ._ResourceId, .ContainerName, .ResourceGroupName, .JobStartDateTime, .JobDurationFormatted, .JobStatus, .JobFailureCode, .JobUniqueId ] | @csv' backup_report.json >> BackupReport_\$(date +'%Y-%m-%d').csv
                    """

                // Fetch storageaccount SAS token from keyvault secret                    
                
                   SAS_TOKEN = sh(script: "az keyvault secret show --name ${SECRET_NAME} --vault-name ${AZURE_KEY_VAULT_NAME} --query value -o tsv", returnStdout: true)
                   }
                }
            }
        }

        stage('Upload to Azure Storage') {
            steps {
                script{
                // Upload the backup report to DEV Azure Blob Storage 
                  
                   sh """
                   az storage blob upload --account-name ${AZURE_STORAGE_ACCOUNT} --container-name ${AZURE_STORAGE_CONTAINER} --name BackupReport_\$(date +'%Y-%m-%d').csv --file BackupReport_\$(date +'%Y-%m-%d').csv --sas-token '${SAS_TOKEN}'
                   """
                }
            }
        }
        
        stage('Send Email of BackUp Report') {
            steps {
                script {
                    def subject = "Backup Report Upload to mcddeveastusbkpreports Successful"
                    def body = "The backup report has been successfully uploaded to Dev Azure Blob Storage (mcddeveastusbkpreports)."
                    def currentDate = new java.text.SimpleDateFormat("yyyy-MM-dd").format(new Date())
                    def attachmentFileName = "BackupReport_${currentDate}.csv"
                    
                    // Send email with backup report attached
                    emailext(
                        to: "${EMAIL_RECIPIENT}",
                        subject: subject,
                        body: body,
                        attachmentsPattern: attachmentFileName, 
                        mimeType: 'text/html',
                        from: ''
                    )
                }
            }
        }
    }
    post {
        success {
            echo 'Backup report uploaded to dev blob storage and email has sent successfully!'
        }
        failure {
            echo 'Backup Report failed to upload to dev blob storage and email has not sent!'
        }
    }
}